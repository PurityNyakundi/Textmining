Womens <- read_csv("Womens Clothing E-Commerce Reviews.csv")
library(readr)
Womens_Clothing_E_Commerce_Reviews <- read_csv("Womens Clothing E-Commerce Reviews.csv")
View(Womens_Clothing_E_Commerce_Reviews)
Womens <- read_csv("Womens Clothing E-Commerce Reviews.csv")
#View(Womens_Clothing_E_Commerce_Reviews)
head(Womens)
str(Womens)
#recommendation is either 1 or 0
#change it to factor
library(tidyverse)
names(Womens)
names(Womens)[7]<-"recommender"
names(Womens)
names(Womens)[5]<-"Review"
Womens<-select(Womens,c("Review","Rating","recommender"))
head(Womens)
library(tm)
review_corpus <- VCorpus(VectorSource(Womens$Review))
print(review_corpus)
inspect(review_corpus[1:3])
lapply(review_corpus[1:4],as.character)
#start cleaning
corpus_clean <- tm_map(review_corpus, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
lapply(corpus_clean[1:4],as.character)
#remove stop words
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
as.character(corpus_clean[[7]])
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
review_dtm <- DocumentTermMatrix(corpus_clean)
review_dtm2 <- DocumentTermMatrix(review_corpus, control = list(
tolower = TRUE,
removeNumbers = TRUE,
stopwords = TRUE,
removePunctuation = TRUE,
stemming = TRUE
))
Womens$recommender<-as.factor(Womens$recommender)
review_dtm_train <- review_dtm2[1:20000, ]
review_dtm_test <- review_dtm2[20001:23486, ]
review_train_labels <- Womens[1:20000, ]$recommender
review_test_labels <- Womens[20001:23486, ]$recommender
prop.table(table(review_train_labels))
library(wordcloud)
wordcloud(corpus_clean, min.freq = 50, random.order = FALSE)
sms_dtm <- DocumentTermMatrix(corpus_clean)
wordcloud(review_corpus_train, min.freq = 40, random.order = FALSE)
review_corpus_train <- corpus_clean[1:20000]
review_corpus_test <- corpus_clean[20001:23486]
wordcloud(review_corpus_train, min.freq = 40, random.order = FALSE)
review_freq_words <- findFreqTerms(review_dtm_train, 5)
str(review_freq_words)
review_dtm_freq_train<- review_dtm_train[ , review_freq_words]
review_dtm_freq_test <- review_dtm_test[ , review_freq_words]
convert_counts <- function(x) {
x <- ifelse(x > 0, "Yes", "No")
}
review_train <- apply(review_dtm_freq_train, MARGIN = 2,
convert_counts)
review_test <- apply(review_dtm_freq_test, MARGIN = 2,
convert_counts)
library(naivebayes)
review_dtm_train <- review_dtm2[1:2000, ]
review_dtm_test <- review_dtm2[2001:3000, ]
review_corpus_train <- corpus_clean[1:2000]
review_corpus_test <- corpus_clean[2001:3000]
review_train_labels <- Womens[1:2001, ]$recommender
review_test_labels <- Womens[2001:3000, ]$recommender
prop.table(table(review_train_labels))
sms_dtm <- DocumentTermMatrix(corpus_clean)
wordcloud(review_corpus_train, min.freq = 40, random.order = FALSE)
review_freq_words <- findFreqTerms(review_dtm_train, 5)
str(review_freq_words)
review_dtm_freq_train<- review_dtm_train[ , review_freq_words]
review_dtm_freq_test <- review_dtm_test[ , review_freq_words]
convert_counts <- function(x) {
x <- ifelse(x > 0, "Yes", "No")
}
review_train <- apply(review_dtm_freq_train, MARGIN = 2,
convert_counts)
review_test <- apply(review_dtm_freq_test, MARGIN = 2,
convert_counts)
library(naivebayes)
review_classifier <- naive_bayes(review_train, review_train_labels)
review_dtm_train <- review_dtm2[1:2000, ]
review_dtm_test <- review_dtm2[2001:3000, ]
review_corpus_train <- corpus_clean[1:2000]
review_corpus_test <- corpus_clean[2001:3000]
review_train_labels <- Womens[1:2000, ]$recommender
review_test_labels <- Womens[2001:3000, ]$recommender
prop.table(table(review_train_labels))
#sms_dtm <- DocumentTermMatrix(corpus_clean)
wordcloud(review_corpus_train, min.freq = 40, random.order = FALSE)
library(wordcloud)
wordcloud(corpus_clean, min.freq = 50, random.order = FALSE)
wordcloud(words = corpus_clean,
min.freq = 100, # minimum number of times a word must be present before it appears
random.order = FALSE, # Arrange most frequent words to be in the center of the word cloud
color = (colors = c("#4575b4","#74add1","#abd9e9","#e0f3f8","#fee090","#fdae61","#f46d43","#d73027")) # Colour gradient for the font
)
review_freq_words <- findFreqTerms(review_dtm_train, 5)
str(review_freq_words)
review_dtm_freq_train<- review_dtm_train[ , review_freq_words]
review_dtm_freq_test <- review_dtm_test[ , review_freq_words]
convert_counts <- function(x) {
x <- ifelse(x > 0, "Yes", "No")
}
review_train <- apply(review_dtm_freq_train, MARGIN = 2,
convert_counts)
review_test <- apply(review_dtm_freq_test, MARGIN = 2,
convert_counts)
library(naivebayes)
review_classifier <- naive_bayes(review_train, review_train_labels)
review_test_pred <- predict(review_classifier, review_test)
CrossTable(review_test_pred, review_test_labels,
prop.chisq = FALSE, prop.t = FALSE,
dnn = c('predicted', 'actual'))
? TermDocumentMatrix
?? TermDocumentMatrix
bb_tdm<- TermDocumentMatrix(bb_corpus)
library(readr)
Womens <- read_csv("Womens Clothing E-Commerce Reviews.csv")
#View(Womens_Clothing_E_Commerce_Reviews)
head(Womens)
str(Womens)
#recommendation is either 1 or 0
#change it to factor
library(tidyverse)
names(Womens)
names(Womens)[7]<-"recommender"
names(Womens)
names(Womens)[5]<-"Review"
Womens<-select(Womens,c("Review","Rating","recommender"))
head(Womens)
library(tm)
review_corpus <- VCorpus(VectorSource(Womens$Review))
print(review_corpus)
inspect(review_corpus[1:3])
lapply(review_corpus[1:4],as.character)
#start cleaning
corpus_clean <- tm_map(review_corpus, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
lapply(corpus_clean[1:4],as.character)
#remove stop words
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
as.character(corpus_clean[[7]])
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
review_dtm <- DocumentTermMatrix(corpus_clean)
bb_tdm<- TermDocumentMatrix(bb_corpus)
bb_tdm<- TermDocumentMatrix(corpus_clean)
Womens <- read_csv("Womens Clothing E-Commerce Reviews.csv")
#View(Womens_Clothing_E_Commerce_Reviews)
head(Womens)
str(Womens)
Womens <- read_csv("Womens Clothing E-Commerce Reviews.csv")
library(readr)
Womens_Clothing_E_Commerce_Reviews <- read_csv("Womens Clothing E-Commerce Reviews.csv")
View(Womens_Clothing_E_Commerce_Reviews)
Womens <- read_csv("Womens Clothing E-Commerce Reviews.csv")
#View(Womens_Clothing_E_Commerce_Reviews)
head(Womens)
str(Womens)
#recommendation is either 1 or 0
#change it to factor
library(tidyverse)
names(Womens)
names(Womens)[7]<-"recommender"
names(Womens)
names(Womens)[5]<-"Review"
Womens<-select(Womens,c("Review","Rating","recommender"))
head(Womens)
library(tm)
review_corpus <- VCorpus(VectorSource(Womens$Review))
print(review_corpus)
inspect(review_corpus[1:3])
lapply(review_corpus[1:4],as.character)
#start cleaning
corpus_clean <- tm_map(review_corpus, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
lapply(corpus_clean[1:4],as.character)
#remove stop words
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
as.character(corpus_clean[[7]])
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
as.character(corpus_clean[[7]])
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
review_dtm <- DocumentTermMatrix(corpus_clean)
sms_dtm <- DocumentTermMatrix(corpus_clean)
review_dtm <- DocumentTermMatrix(corpus_clean)
?DocumentTermMatrix
bb_tdm<- TermDocumentMatrix(corpus_clean)
review_dtm2 <- DocumentTermMatrix(review_corpus, control = list(
tolower = TRUE,
removeNumbers = TRUE,
stopwords = TRUE,
removePunctuation = TRUE,
stemming = TRUE
))
Womens$recommender<-as.factor(Womens$recommender)
str(womens)
str(Womens)
Womens$recommender<-as.factor(Womens$recommender)
str(Womens)
Womens<-select(Womens,c("Review","Rating","recommender"))
head(Womens)
Womens1<-select(Womens,c("Review","Rating","recommender"))
names(Womens)
head(Womens1)
library(tm)
review_corpus <- VCorpus(VectorSource(Womens1$Review))
print(review_corpus)
inspect(review_corpus[1:3])
lapply(review_corpus[1:4],as.character)
#start cleaning
corpus_clean <- tm_map(review_corpus, tolower)
corpus_clean <- tm_map(corpus_clean, removeNumbers)
lapply(corpus_clean[1:4],as.character)
#remove stop words
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
as.character(corpus_clean[[7]])
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
review_dtm2 <- DocumentTermMatrix(review_corpus, control = list(
tolower = TRUE,
removeNumbers = TRUE,
stopwords = TRUE,
removePunctuation = TRUE,
stemming = TRUE
))
Womens$recommender<-as.factor(Womens$recommender)
str(Womens)
str(Womens1)
review_dtm_train <- review_dtm2[1:2000, ]
review_dtm_test <- review_dtm2[2001:3000, ]
review_corpus_train <- corpus_clean[1:2000]
review_corpus_test <- corpus_clean[2001:3000]
review_train_labels <- Womens[1:2000, ]$recommender
review_test_labels <- Womens[2001:3000, ]$recommender
prop.table(table(review_train_labels))
#sms_dtm <- DocumentTermMatrix(corpus_clean)
wordcloud(review_corpus_train, min.freq = 40, random.order = FALSE)
library(wordcloud)
wordcloud(corpus_clean, min.freq = 50, random.order = FALSE)
Womens <- read_csv("Womens Clothing E-Commerce Reviews.csv")
#View(Womens_Clothing_E_Commerce_Reviews)
head(Womens)
str(Womens)
#recommendation is either 1 or 0
#change it to factor
library(tidyverse)
names(Womens)
names(Womens)[7]<-"recommender"
names(Womens)
names(Womens)[5]<-"Review"
Womens1<-select(Womens,c("Review","Rating","recommender"))
head(Womens1)
library(tm)
review_corpus <- VCorpus(VectorSource(Womens1$Review))
print(review_corpus)
inspect(review_corpus[1:3])
lapply(review_corpus[1:4],as.character)
#start cleaning
corpus_clean <- tm_map(review_corpus, content_transformer(tolower))
corpus_clean <- tm_map(corpus_clean, removeNumbers)
lapply(corpus_clean[1:4],as.character)
#remove stop words
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords())
corpus_clean <- tm_map(corpus_clean, removePunctuation)
as.character(corpus_clean[[7]])
#start cleaning
corpus_clean <- tm_map(review_corpus, content_transformer(tolower))
corpus_clean <- tm_map(corpus_clean, removeNumbers)
lapply(corpus_clean[1:4],as.character)
#remove stop words
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords("english"))
corpus_clean <- tm_map(corpus_clean, removePunctuation)
as.character(corpus_clean[[7]])
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
lapply(corpus_clean[1:4],as.character)
sms_dtm <- DocumentTermMatrix(corpus_clean)
review_dtm <- DocumentTermMatrix(corpus_clean)
Womens$recommender<-as.factor(Womens$recommender)
str(Womens1)
review_dtm_train <- review_dtm[1:2000, ]
review_dtm_test <- review_dtm[2001:3000, ]
review_corpus_train <- corpus_clean[1:2000]
review_corpus_test <- corpus_clean[2001:3000]
review_train_labels <- Womens1[1:2000, ]$recommender
review_test_labels <- Womens1[2001:3000, ]$recommender
prop.table(table(review_train_labels))
#sms_dtm <- DocumentTermMatrix(corpus_clean)
wordcloud(review_corpus_train, min.freq = 40, random.order = FALSE)
library(wordcloud)
wordcloud(corpus_clean, min.freq = 50, random.order = FALSE)
wordcloud(words = corpus_clean,
min.freq = 100, # minimum number of times a word must be present before it appears
random.order = FALSE, # Arrange most frequent words to be in the center of the word cloud
color = (colors = c("#4575b4","#74add1","#abd9e9","#e0f3f8","#fee090","#fdae61","#f46d43","#d73027")) # Colour gradient for the font
)
review_freq_words <- findFreqTerms(review_dtm_train, 5)
str(review_freq_words)
review_dtm_freq_train<- review_dtm_train[ , review_freq_words]
review_dtm_freq_test <- review_dtm_test[ , review_freq_words]
convert_counts <- function(x) {
x <- ifelse(x > 0, "Yes", "No")
}
review_train <- apply(review_dtm_freq_train, MARGIN = 2,
convert_counts)
review_test <- apply(review_dtm_freq_test, MARGIN = 2,
convert_counts)
library(naivebayes)
review_classifier <- naive_bayes(review_train, review_train_labels)
library(readr)
Womens <- read_csv("Womens Clothing E-Commerce Reviews.csv")
#View(Womens_Clothing_E_Commerce_Reviews)
head(Womens)
str(Womens)
#recommendation is either 1 or 0
#change it to factor
library(tidyverse)
names(Womens)
names(Womens)[7]<-"recommender"
names(Womens)
names(Womens)[5]<-"Review"
Womens1<-select(Womens,c("Review","Rating","recommender"))
head(Womens1)
library(tm)
review_corpus <- VCorpus(VectorSource(Womens1$Review))
print(review_corpus)
inspect(review_corpus[1:3])
lapply(review_corpus[1:4],as.character)
#start cleaning
corpus_clean <- tm_map(review_corpus, content_transformer(tolower))
corpus_clean <- tm_map(corpus_clean, removeNumbers)
lapply(corpus_clean[1:4],as.character)
#remove stop words
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords("english"))
corpus_clean <- tm_map(corpus_clean, removePunctuation)
as.character(corpus_clean[[7]])
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
#sms_dtm <- DocumentTermMatrix(corpus_clean)
review_dtm <- DocumentTermMatrix(corpus_clean)
Womens1$recommender<-as.factor(Womens1$recommender)
str(Womens1)
review_dtm_train <- review_dtm[1:2000, ]
review_dtm_test <- review_dtm[2001:3000, ]
review_corpus_train <- corpus_clean[1:2000]
review_corpus_test <- corpus_clean[2001:3000]
review_train_labels <- Womens1[1:2000, ]$recommender
review_test_labels <- Womens1[2001:3000, ]$recommender
prop.table(table(review_train_labels))
#sms_dtm <- DocumentTermMatrix(corpus_clean)
wordcloud(review_corpus_train, min.freq = 40, random.order = FALSE)
library(wordcloud)
wordcloud(corpus_clean, min.freq = 50, random.order = FALSE)
wordcloud(words = corpus_clean,
min.freq = 100, # minimum number of times a word must be present before it appears
random.order = FALSE, # Arrange most frequent words to be in the center of the word cloud
color = (colors = c("#4575b4","#74add1","#abd9e9","#e0f3f8","#fee090","#fdae61","#f46d43","#d73027")) # Colour gradient for the font
)
review_freq_words <- findFreqTerms(review_dtm_train, 5)
str(review_freq_words)
review_dtm_freq_train<- review_dtm_train[ , review_freq_words]
review_dtm_freq_test <- review_dtm_test[ , review_freq_words]
convert_counts <- function(x) {
x <- ifelse(x > 0, "Yes", "No")
}
review_train <- apply(review_dtm_freq_train, MARGIN = 2,
convert_counts)
review_test <- apply(review_dtm_freq_test, MARGIN = 2,
convert_counts)
library(naivebayes)
review_classifier <- naive_bayes(review_train, review_train_labels)
review_test_pred <- predict(review_classifier, review_test)
colSums(is.na(Womens1))
Womens1<-Womens1%>%
drop_na()
colSums(is.na(Womens1))
review_dtm_train <- review_dtm[1:2000, ]
review_dtm_test <- review_dtm[2001:3000, ]
review_corpus_train <- corpus_clean[1:2000]
review_corpus_test <- corpus_clean[2001:3000]
review_train_labels <- Womens1[1:2000, ]$recommender
review_test_labels <- Womens1[2001:3000, ]$recommender
prop.table(table(review_train_labels))
review_freq_words <- findFreqTerms(review_dtm_train, 5)
str(review_freq_words)
review_dtm_freq_train<- review_dtm_train[ , review_freq_words]
review_dtm_freq_test <- review_dtm_test[ , review_freq_words]
convert_counts <- function(x) {
x <- ifelse(x > 0, "Yes", "No")
}
review_train <- apply(review_dtm_freq_train, MARGIN = 2,
convert_counts)
review_test <- apply(review_dtm_freq_test, MARGIN = 2,
convert_counts)
library(naivebayes)
review_classifier <- naive_bayes(review_train, review_train_labels)
review_test_pred <- predict(review_classifier, review_test)
head(Womens1)
colSums(is.na(Womens1))
review_corpus <- VCorpus(VectorSource(Womens1$Review))
print(review_corpus)
inspect(review_corpus[1:3])
lapply(review_corpus[1:4],as.character)
#start cleaning
corpus_clean <- tm_map(review_corpus, content_transformer(tolower))
corpus_clean <- tm_map(corpus_clean, removeNumbers)
lapply(corpus_clean[1:4],as.character)
#remove stop words
corpus_clean <- tm_map(corpus_clean, removeWords, stopwords("english"))
corpus_clean <- tm_map(corpus_clean, removePunctuation)
as.character(corpus_clean[[7]])
corpus_clean <- tm_map(corpus_clean, stripWhitespace)
lapply(corpus_clean[1:4],as.character)
#sms_dtm <- DocumentTermMatrix(corpus_clean)
review_dtm <- DocumentTermMatrix(corpus_clean)
review_dtm2 <- DocumentTermMatrix(review_corpus, control = list(
tolower = TRUE,
removeNumbers = TRUE,
stopwords = TRUE,
removePunctuation = TRUE,
stemming = TRUE
))
Womens1$recommender<-as.factor(Womens1$recommender)
str(Womens1)
colSums(is.na(Womens1))
head(Womens1)
review_dtm_train <- review_dtm[1:2000, ]
review_dtm_test <- review_dtm[2001:3000, ]
review_corpus_train <- corpus_clean[1:2000]
review_corpus_test <- corpus_clean[2001:3000]
review_train_labels <- Womens1[1:2000, ]$recommender
review_test_labels <- Womens1[2001:3000, ]$recommender
prop.table(table(review_train_labels))
#sms_dtm <- DocumentTermMatrix(corpus_clean)
wordcloud(review_corpus_train, min.freq = 40, random.order = FALSE)
review_freq_words <- findFreqTerms(review_dtm_train, 5)
str(review_freq_words)
review_dtm_freq_train<- review_dtm_train[ , review_freq_words]
review_dtm_freq_test <- review_dtm_test[ , review_freq_words]
convert_counts <- function(x) {
x <- ifelse(x > 0, "Yes", "No")
}
review_train <- apply(review_dtm_freq_train, MARGIN = 2,
convert_counts)
review_test <- apply(review_dtm_freq_test, MARGIN = 2,
convert_counts)
library(naivebayes)
review_classifier <- naive_bayes(review_train, review_train_labels)
warnings()
View(review_dtm_train)
review_train <- DocumentTermMatrix(review_corpus_train ,
list(dictionary = review_freq_words))
review_test <- DocumentTermMatrix(review_corpus_test,
list(dictionary = review_freq_words))
convert_counts <- function(x) {
x <- ifelse(x > 0, "Yes", "No")
}
review_train <- apply(review_dtm_freq_train, MARGIN = 2,
convert_counts)
review_train <- apply(review_train, MARGIN = 2, convert_counts)
review_test <- apply(review_test, MARGIN = 2, convert_counts)
library(naivebayes)
review_classifier <- naive_bayes(review_train, review_train_labels)
review_test_pred <- predict(review_classifier, review_test)
review_train_raw <- Womens1[1:2000, ]
review_test_raw <- Womens1[2001:3000, ]
review_classifier <- naive_bayes(review_train, review_train_raw$recommender)
review_test_pred <- predict(review_classifier, review_test)
review_test <- apply(review_test, MARGIN = 2, convert_counts)
library(naivebayes)
review_classifier <- naive_bayes(review_train, review_train_raw$recommender)
review_test_pred <- predict(review_classifier, review_test)
CrossTable(review_test_pred, review_test_labels,
prop.chisq = FALSE, prop.t = FALSE,
dnn = c('predicted', 'actual'))
library(caret)
confusionMatrix(review_test_pred,review_test_labels)
?glm
library(tm)
data(acq)
tdm <- TermDocumentMatrix(acq)
nTerms(tdm)
head(acq)
findFreqTerms(tdm,30)
#Let's find out the words that correlate to word stock with the correlation of atleast 0.70
findAssocs(tdm, "stock", 0.70)
#The generated term document matrix may be huge. The size of our DTM is 50 X 2013 It says 96% of the rows are zero, that is, the majority of words will appear in a few documents. We can reduce the sparsity of the document forcomputational
efficiency.inspect(tdm):
#The generated term document matrix may be huge. The size of our DTM is 50 X 2013 It says 96% of the rows are zero, that is, the majority of words will appear in a few documents. We can reduce the sparsity of the document forcomputational
efficiency.inspect(tdm)
tdm
#The output shows that 96% of the terms occur just a few times, thus the document term matrix becomes large even for a small sized data set. We need to remove the sparse terms:
inspect(removeSparseTerms(tdm, 0.3))
# convert to lower case
acq <- tm_map(acq, content_transformer(tolower))
#remove whitespaces
acq <- tm_map(acq, stripWhitespace)
#remove stop words(english)
acq <- tm_map(acq, removeWords, stopwords("english"))
